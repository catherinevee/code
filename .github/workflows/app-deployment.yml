name: Optimized Build and Deploy

on:
  push:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results
          retention-days: 5

  build-frontend:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/build
          retention-days: 1

  build-api:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd api && npm ci

      - name: Build API
        run: cd api && npm run build

      - name: Upload API build
        uses: actions/upload-artifact@v3
        with:
          name: api-build
          path: ./api/dist
          retention-days: 1

  build-data-services:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd data-services && npm ci

      - name: Build data services
        run: cd data-services && npm run build

      - name: Upload data services build
        uses: actions/upload-artifact@v3
        with:
          name: data-services-build
          path: ./data-services/dist
          retention-days: 1

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-frontend]
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3 and invalidate CloudFront
        run: |
          aws s3 sync ./frontend/build s3://${{ secrets.FRONTEND_BUCKET_NAME }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  deploy-api:
    runs-on: ubuntu-latest
    needs: [build-api]
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Download API build
        uses: actions/download-artifact@v3
        with:
          name: api-build
          path: ./api/dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to Elastic Beanstalk
        run: |
          zip -r api.zip ./api/dist
          aws s3 cp api.zip s3://${{ secrets.DEPLOYMENT_BUCKET }}/api.zip
          aws elasticbeanstalk create-application-version \
            --application-name MyApp \
            --version-label "api-${{ github.sha }}" \
            --source-bundle S3Bucket="${{ secrets.DEPLOYMENT_BUCKET }}",S3Key="api.zip"
          aws elasticbeanstalk update-environment \
            --environment-name MyApp-env \
            --version-label "api-${{ github.sha }}"

  deploy-data-services:
    runs-on: ubuntu-latest
    needs: [build-data-services]
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Download data services build
        uses: actions/download-artifact@v3
        with:
          name: data-services-build
          path: ./data-services/dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy Lambda functions
        run: |
          cd data-services
          npm ci
          npm run deploy-lambda

  integration-tests:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-api, deploy-data-services]
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd integration-tests && npm ci

      - name: Run integration tests
        run: cd integration-tests && npm run test
        env:
          API_URL: ${{ secrets.PRODUCTION_API_URL }}
          FRONTEND_URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}

  notify:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()
    steps:
      - name: Notify Slack on success
        if: ${{ success() }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {"text": "✅ Deployment succeeded for ${{ github.repository }}@${{ github.ref }}"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {"text": "❌ Deployment failed for ${{ github.repository }}@${{ github.ref }}"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
