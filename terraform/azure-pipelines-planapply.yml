variables:
  azureSubscription: "Azure subscription 1"
  location: "polandcentral"
  resourceGroup: "tfstate-rg" #located in polandcentral
  storageAccountName: "tfstatecriy"
  containerName: "terraformtfstate"
  terraform_version: 1.11.3
  backendServiceArm: "catherinevee_manid"
  backendServiceResourceGroup: "polandcentralrg-1" #the RG of the Managed Identity

parameters:
- name: TerraformImportTask
  displayName: Check this to do a Terraform Import for the Storage Account for the state file
  type: boolean
  default: false
- name: TerraformApplyTask
  displayName: Check this to do an Apply operation
  type: boolean
  default: false
- name: TerraformDestroyTask
  displayName: Check this to do a Destroy operation
  type: boolean
  default: false

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - terraform

pr: none

stages:
- stage: "Run_Terraform"
  jobs:
  - job: "GenerateRemoteStateBackend"
    steps:
    - task: AzureCLI@2
      name: "azurecli"
      displayName: "Generate Storage Account"
      inputs:
        azureSubscription: $(backendServiceArm)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Set Azure Subscription
          az account set -s $(azureSubscription)

          # Create resource group
          az group create -l $(location) -n $(resourceGroup)

          # Create storage account
          az storage account create -n $(storageAccountName) -g $(resourceGroup) -l $(location) --sku Standard_LRS --kind StorageV2

          # Create blob container
          az storage container create --account-name $(storageAccountName) --name $(containerName)

          resourceGroupResourceID=$(az group show -n polandcentralrg-1 -o tsv --query id)
          echo "##vso[task.setvariable variable=rgri;isOutput=true ]$resourceGroupResourceID" 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
  - job: "Terraform"
    dependsOn: GenerateRemoteStateBackend
    variables:
      rgri: $[ dependencies.GenerateRemoteStateBackend.outputs['GenerateRemoteStateBackend.rgri'] ]
    steps:
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: "terraform install"
      inputs:
        terraformVersion: '$(terraform_version)'
    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: $(backendServiceArm)
        backendAzureRmResourceGroupName: $(resourceGroup)
        backendAzureRmStorageAccountName: $(storageAccountName)
        backendAzureRmContainerName: $(containerName)
        backendAzureRmKey: 'state.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
      env:
        ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(AZURE_TENANT_ID)
        ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
        AWS_ACCESS_KEY_ID: $( AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

    - task: TerraformCLI@2
      displayName: "(Opt) Terraform Import"
      continueOnError: true
      inputs:
        command: 'import'
        resourceAddress: "azurerm_resource_group.polandcentralrg-1"
        resourceId: $(rgri)
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        environmentServiceName: 'catherinevee_manid'
      condition: eq(${{ parameters.TerraformImportTask }}, true)
    - task: TerraformTask@5
      displayName: "Terraform Validate"
      inputs:
        provider: 'azurerm'
        command: 'validate'
    - task: TerraformTaskV4@4
      displayName: "Terraform Plan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-var "region=$(region)" -var "access_key=$(AWS_ACCESS_KEY_ID)"  -var "secret_key=$(AWS_SECRET_ACCESS_KEY)" -out main.tfplan'
        environmentServiceNameAzureRM: $(backendServiceArm)
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        publishPlanResults: "main.tfplan"
      env:
        ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(AZURE_TENANT_ID)
        ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
        AWS_ACCESS_KEY_ID: $( AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
    - task: TerraformTaskV4@4
      displayName: "Terraform PublishPlan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-var "region=$(region)" -var "access_key=$(AWS_ACCESS_KEY_ID)"  -var "secret_key=$(AWS_SECRET_ACCESS_KEY)" -out main.tfplan'
        environmentServiceNameAzureRM: $(backendServiceArm)
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        publishPlanResults: "main.tfplan"

    - task: TerraformCLI@2
      displayName: "(Opt) Terraform Apply"
      continueOnError: true
      inputs:
        command: 'apply'
        commandOptions: '-var "region=$(region)" -var "access_key=$(AWS_ACCESS_KEY_ID)"  -var "secret_key=$(AWS_SECRET_ACCESS_KEY)"--auto-approve'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        environmentServiceName: 'catherinevee_manid'
      condition: eq(${{ parameters.TerraformApplyTask }}, true)
      env:
        ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(AZURE_TENANT_ID)
        ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
        AWS_ACCESS_KEY_ID: $( AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
    - task: TerraformCLI@2
      displayName: "(Opt) Terraform Destroy"
      continueOnError: true
      inputs:
        command: 'destroy'
        commandOptions: '-var "region=$(region)" -var "access_key=$(AWS_ACCESS_KEY_ID)"  -var "secret_key=$(AWS_SECRET_ACCESS_KEY)" --auto-approve'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        environmentServiceName: 'catherinevee_manid'
      condition: eq(${{ parameters.TerraformDestroyTask }}, true)
      env:
        ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(AZURE_TENANT_ID)
        ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
        AWS_ACCESS_KEY_ID: $( AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
