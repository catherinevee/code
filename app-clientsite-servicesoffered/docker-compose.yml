
version: '3.8'

services:
  # Main web application service
  webapp:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-1.0}
    
    # Container name for easier management
    container_name: modern-webapp
    
    # Restart policy for production reliability
    restart: unless-stopped
    
    # Port mapping - expose container port 80 to host port 8080
    ports:
      - "8080:80"
      # Optional: Uncomment for HTTPS
      # - "8443:443"
    
    # Environment variables for configuration
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
      - NGINX_KEEPALIVE_TIMEOUT=65
      - TZ=UTC  # Set timezone
    
    # Volume mounts for persistence and configuration
    volumes:
      # Persistent logs
      - webapp_logs:/var/log/nginx
      # Optional: Mount custom nginx config
      # - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # Optional: Mount static content for live updates
      # - ./html:/usr/share/nginx/html:ro
    
    # Resource limits for better resource management
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'
    
    # Health check configuration
    healthcheck:
      test: ["/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Read-only root filesystem for security (with tmpfs for writable areas)
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
      - /var/cache/nginx
    
    # Networks
    networks:
      - webapp_network
    
    # Labels for better container management
    labels:
      - "com.example.service=webapp"
      - "com.example.version=1.0"
      - "traefik.enable=true"  # For Traefik reverse proxy
      - "traefik.http.routers.webapp.rule=Host(`localhost`)"
      - "traefik.http.services.webapp.loadbalancer.server.port=80"

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: webapp-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes
  #   networks:
  #     - webapp_network
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 64M
  #         cpus: '0.25'

  # Optional: Monitoring with Prometheus metrics (uncomment if needed)
  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter:0.10.0
  #   container_name: webapp-metrics
  #   restart: unless-stopped
  #   ports:
  #     - "9113:9113"
  #   command:
  #     - -nginx.scrape-uri=http://webapp:80/nginx_status
  #   networks:
  #     - webapp_network
  #   depends_on:
  #     - webapp

  # Optional: Log aggregation with Fluentd (uncomment if needed)
  # fluentd:
  #   image: fluentd:v1.16-1
  #   container_name: webapp-logs
  #   restart: unless-stopped
  #   volumes:
  #     - webapp_logs:/fluentd/log
  #     - ./fluentd:/fluentd/etc
  #   networks:
  #     - webapp_network
  #   depends_on:
  #     - webapp

# Named volumes for data persistence
volumes:
  webapp_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  # Optional: Redis data volume
  # redis_data:
  #   driver: local

# Custom network for service isolation
networks:
  webapp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    # Enable IPv6 if needed
    # enable_ipv6: true

# Development override (create docker-compose.override.yml for dev settings)
# This file would automatically be used in development

# docker-compose.override.yml (example for development)
# version: '3.8'
# services:
#   webapp:
#     build:
#       target: development  # If using multi-stage builds
#     ports:
#       - "3000:80"  # Different port for development
#     volumes:
#       - .:/app:cached  # Live reload for development
#     environment:
#       - NODE_ENV=development
#       - DEBUG=true
#     command: ["nginx", "-g", "daemon off;"]